
nios_led.elf:     file format elf32-littlenios2
nios_led.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000001b0 memsz 0x000001bc flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000001b0  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  000011d0  000011d0  000011d0  2**2
                  ALLOC, SMALL_DATA
  3 .comment      00000026  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000011f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000013b  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a3  00000000  00000000  0000143b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000365  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f23  00000000  00000000  00001e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00002d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b1  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ac  00000000  00000000  00003231  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000010  00000000  00000000  000032e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  000032f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY
 15 .cpu          0000000c  00000000  00000000  00003ed3  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  00003edf  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  00003ee0  2**0
                  CONTENTS, READONLY
 18 .stderr_dev   00000004  00000000  00000000  00003ee1  2**0
                  CONTENTS, READONLY
 19 .stdin_dev    00000004  00000000  00000000  00003ee5  2**0
                  CONTENTS, READONLY
 20 .stdout_dev   00000004  00000000  00000000  00003ee9  2**0
                  CONTENTS, READONLY
 21 .sopc_system_name 0000000e  00000000  00000000  00003eed  2**0
                  CONTENTS, READONLY
 22 .quartus_project_dir 00000048  00000000  00000000  00003efb  2**0
                  CONTENTS, READONLY
 23 .sopcinfo     00035a9e  00000000  00000000  00003f43  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .text	00000000 .text
000011d0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
000010e4 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00001170 g     F .text	0000002c alt_main
000011d0 g       *ABS*	00000000 __flash_rwdata_start
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000011d4 g     O .bss	00000004 alt_argv
000091d0 g       *ABS*	00000000 _gp
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000011dc g       *ABS*	00000000 __bss_end
000011c0 g     F .text	00000004 alt_dcache_flush_all
000011d0 g       *ABS*	00000000 __ram_rwdata_end
000011d0 g       *ABS*	00000000 __ram_rodata_end
000011dc g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001020 g     F .text	0000003c _start
0000119c g     F .text	00000004 alt_sys_init
000011d0 g       *ABS*	00000000 __ram_rwdata_start
000011d0 g       *ABS*	00000000 __ram_rodata_start
000011dc g       *ABS*	00000000 __alt_stack_base
000011d0 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000088 main
000011d8 g     O .bss	00000004 alt_envp
000011d0 g       *ABS*	00000000 __flash_rodata_start
000011a0 g     F .text	00000020 alt_irq_init
000011d0 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
000011d0 g       *ABS*	00000000 _edata
000011dc g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
000011c8 g     F .text	00000008 altera_nios2_qsys_irq_init
0000100c g       .entry	00000000 exit
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000011c4 g     F .text	00000004 alt_icache_flush_all
00001104 g     F .text	0000006c alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a47414 	ori	gp,gp,37328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10847414 	ori	r2,r2,4560

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c47714 	ori	r3,r3,4572

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00011040 	call	1104 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00011700 	call	1170 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <main>:

	//alt_putstr("Hello from Nios II!\n");

	/* Event loop never exits. */
	while (1) {
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, red);
    105c:	018c0804 	movi	r6,12320
    1060:	00c08034 	movhi	r3,512
    1064:	18ffffc4 	addi	r3,r3,-1
    1068:	30c00035 	stwio	r3,0(r6)
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_1_BASE, green);
    106c:	014c0004 	movi	r5,12288
    1070:	28c00035 	stwio	r3,0(r5)
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_2_BASE, blue);
    1074:	010c0404 	movi	r4,12304
    1078:	20c00035 	stwio	r3,0(r4)

	//alt_putstr("Hello from Nios II!\n");

	/* Event loop never exits. */
	while (1) {
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, red);
    107c:	00808034 	movhi	r2,512
    1080:	10bfff84 	addi	r2,r2,-2
    1084:	30800035 	stwio	r2,0(r6)
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_1_BASE, green);
    1088:	28c00035 	stwio	r3,0(r5)
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_2_BASE, blue);
    108c:	20c00035 	stwio	r3,0(r4)

	//alt_putstr("Hello from Nios II!\n");

	/* Event loop never exits. */
	while (1) {
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, red);
    1090:	10bfffc4 	addi	r2,r2,-1
    1094:	30800035 	stwio	r2,0(r6)
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_1_BASE, green);
    1098:	28c00035 	stwio	r3,0(r5)
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_2_BASE, blue);
    109c:	20c00035 	stwio	r3,0(r4)
	  while(delay < 1000) // 50 MHz = 20 ns · 25M counts = 0.5 s
	  {
		  delay++;
	  }
	  */
	  red--;
    10a0:	10bfffc4 	addi	r2,r2,-1
    10a4:	180f883a 	mov	r7,r3

	//alt_putstr("Hello from Nios II!\n");

	/* Event loop never exits. */
	while (1) {
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, red);
    10a8:	30800035 	stwio	r2,0(r6)
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_1_BASE, green);
    10ac:	29c00035 	stwio	r7,0(r5)
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_2_BASE, blue);
    10b0:	20c00035 	stwio	r3,0(r4)
	  while(delay < 1000) // 50 MHz = 20 ns · 25M counts = 0.5 s
	  {
		  delay++;
	  }
	  */
	  red--;
    10b4:	10bfffc4 	addi	r2,r2,-1
	  if(!red) {
    10b8:	103ffb1e 	bne	r2,zero,10a8 <main+0x4c>
		  red = 0x1FFFFFF;
		  green--;
    10bc:	39ffffc4 	addi	r7,r7,-1
	  	  if(!green) {
	  		  green = 0x1FFFFFF;
	  		  blue--;
    10c0:	1a3fffc4 	addi	r8,r3,-1
	  }
	  */
	  red--;
	  if(!red) {
		  red = 0x1FFFFFF;
		  green--;
    10c4:	00808034 	movhi	r2,512
    10c8:	10bfffc4 	addi	r2,r2,-1
	  	  if(!green) {
    10cc:	383ff61e 	bne	r7,zero,10a8 <main+0x4c>
	  		  green = 0x1FFFFFF;
	  		  blue--;
    10d0:	1007883a 	mov	r3,r2
    10d4:	100f883a 	mov	r7,r2
	  		  if(!blue)
    10d8:	403ff326 	beq	r8,zero,10a8 <main+0x4c>
    10dc:	4007883a 	mov	r3,r8
    10e0:	003ff106 	br	10a8 <main+0x4c>

000010e4 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10e4:	2900051e 	bne	r5,r4,10fc <alt_load_section+0x18>
    10e8:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    10ec:	20800017 	ldw	r2,0(r4)
    10f0:	21000104 	addi	r4,r4,4
    10f4:	28800015 	stw	r2,0(r5)
    10f8:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    10fc:	29bffb1e 	bne	r5,r6,10ec <alt_load_section+0x8>
    1100:	f800283a 	ret

00001104 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1104:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1108:	01000034 	movhi	r4,0
    110c:	21047404 	addi	r4,r4,4560
    1110:	01400034 	movhi	r5,0
    1114:	29447404 	addi	r5,r5,4560
    1118:	01800034 	movhi	r6,0
    111c:	31847404 	addi	r6,r6,4560
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1120:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1124:	00010e40 	call	10e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1128:	01000034 	movhi	r4,0
    112c:	21040804 	addi	r4,r4,4128
    1130:	01400034 	movhi	r5,0
    1134:	29440804 	addi	r5,r5,4128
    1138:	01800034 	movhi	r6,0
    113c:	31840804 	addi	r6,r6,4128
    1140:	00010e40 	call	10e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1144:	01000034 	movhi	r4,0
    1148:	21047404 	addi	r4,r4,4560
    114c:	01400034 	movhi	r5,0
    1150:	29447404 	addi	r5,r5,4560
    1154:	01800034 	movhi	r6,0
    1158:	31847404 	addi	r6,r6,4560
    115c:	00010e40 	call	10e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1160:	00011c00 	call	11c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1164:	dfc00017 	ldw	ra,0(sp)
    1168:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    116c:	00011c41 	jmpi	11c4 <alt_icache_flush_all>

00001170 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1170:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1174:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1178:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    117c:	00011a00 	call	11a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1180:	000119c0 	call	119c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1184:	d1200017 	ldw	r4,-32768(gp)
    1188:	d1600117 	ldw	r5,-32764(gp)
    118c:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1190:	dfc00017 	ldw	ra,0(sp)
    1194:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1198:	000105c1 	jmpi	105c <main>

0000119c <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
}
    119c:	f800283a 	ret

000011a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11a0:	deffff04 	addi	sp,sp,-4
    11a4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    11a8:	00011c80 	call	11c8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    11ac:	00800044 	movi	r2,1
    11b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    11b4:	dfc00017 	ldw	ra,0(sp)
    11b8:	dec00104 	addi	sp,sp,4
    11bc:	f800283a 	ret

000011c0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    11c0:	f800283a 	ret

000011c4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    11c4:	f800283a 	ret

000011c8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    11c8:	000170fa 	wrctl	ienable,zero
}
    11cc:	f800283a 	ret
